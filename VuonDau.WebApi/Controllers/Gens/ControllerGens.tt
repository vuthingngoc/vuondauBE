<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# 
   var server = new Server(new ServerConnection("localhost", "sa", "1"));
            var db = server.Databases["VuondauDB"];
    foreach(Table table in db.Tables)
    {
        if(!(table.Name.Contains("AspNet") || table.Name.Contains("sysdiagrams") || table.Name.Contains("Migrations")))
        {
#>
using AutoMapper;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using VuonDau.Data.Models;
using VuonDau.Business.Services;
using System.Linq;
namespace Reso_Audit.Controllers
{
    [ApiController]
    [Route("api/<#= GetRouteName(table.Name)  #>")]
    public partial class <#= ChangeName(table.Name) #>Controller : ControllerBase
    {
        private readonly I<#= table.Name #>Service _<#= ToLowerFirstLetter(table.Name) #>Service;
        private readonly IConfigurationProvider _mapper;
        public <#= ChangeName(table.Name) #>Controller(I<#= table.Name #>Service <#= ToLowerFirstLetter(table.Name) #>Service,IMapper mapper){
            _<#= ToLowerFirstLetter(table.Name) #>Service=<#= ToLowerFirstLetter(table.Name) #>Service;
            _mapper= mapper.ConfigurationProvider;
        }
        [HttpGet]
        public IActionResult Gets()
        {
            return Ok(_<#= ToLowerFirstLetter(table.Name) #>Service.Get().ToList());
        }
        [HttpGet("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult GetById(<#=ToClrType(table.Columns[0].DataType, table.Columns[0].Nullable) #> id)
        {
            return Ok(_<#= ToLowerFirstLetter(table.Name) #>Service.Get(id));
        }
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult Create(<#= table.Name #> entity)
        {
            _<#= ToLowerFirstLetter(table.Name) #>Service.Create(entity);
            return  CreatedAtAction(nameof(GetById), new { id = entity}, entity);
        }
        [HttpPut("{id}")]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult Update(<#=ToClrType(table.Columns[0].DataType, table.Columns[0].Nullable) #> id,<#= table.Name #> entity)
        {
            _<#= ToLowerFirstLetter(table.Name) #>Service.Update(entity);
            return Ok();
        }
        [HttpDelete("{id}")]
        public IActionResult Delete(<#=ToClrType(table.Columns[0].DataType, table.Columns[0].Nullable) #> id,<#= table.Name #> entity)
        {
            _<#= ToLowerFirstLetter(table.Name) #>Service.Delete(entity);
            return Ok();
        }
        [HttpGet("count")]
        public IActionResult Count()
        {
            return Ok(_<#= ToLowerFirstLetter(table.Name) #>Service.Count());
        }
    }
}
<#      
 SaveOutput(ChangeName(table.Name) + "ControllerGen.cs");
        }

    }
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
 private static string ToClrType(DataType dataType, bool isNullable)
        {
            string returnType = string.Empty;
            switch (dataType.SqlDataType)
            {
                case SqlDataType.BigInt:
                    returnType = string.Format("{0}{1}", "long", isNullable ? "?" : "");
                    break;
                case SqlDataType.Binary:
                case SqlDataType.Image:
                case SqlDataType.Timestamp:
                case SqlDataType.VarBinary:
                    returnType = "byte[]";
                    break;
                case SqlDataType.Bit:
                    returnType = string.Format("{0}{1}", "bool", isNullable ? "?" : "");
                    break;
                case SqlDataType.Char:
                case SqlDataType.NChar:
                case SqlDataType.NText:
                case SqlDataType.NVarChar:
                case SqlDataType.Text:
                case SqlDataType.VarChar:
                case SqlDataType.Xml:
                    returnType = string.Format("{0}{1}", "string", "");
                    break;
                case SqlDataType.DateTime:
                case SqlDataType.SmallDateTime:
                case SqlDataType.Date:
                case SqlDataType.Time:
                case SqlDataType.DateTime2:
                    returnType = string.Format("{0}{1}", "System.DateTime", isNullable ? "?" : "");
                    break;
                case SqlDataType.Decimal:
                case SqlDataType.Money:
                case SqlDataType.SmallMoney:
                    returnType = string.Format("{0}{1}", "decimal", isNullable ? "?" : "");
                    break;
                case SqlDataType.Float:
                    returnType = string.Format("{0}{1}", "double", isNullable ? "?" : "");
                    break;
                case SqlDataType.Int:
                    returnType = string.Format("{0}{1}", "int", isNullable ? "?" : "");
                    break;
                case SqlDataType.Real:
                    returnType = string.Format("{0}{1}", "float", isNullable ? "?" : "");
                    break;
                case SqlDataType.UniqueIdentifier:
                    returnType = string.Format("{0}{1}", "Guid", isNullable ? "?" : "");
                    break;
                case SqlDataType.SmallInt:
                    returnType = string.Format("{0}{1}", "short", isNullable ? "?" : "");
                    break;
                case SqlDataType.TinyInt:
                    returnType = string.Format("{0}{1}", "byte", isNullable ? "?" : "");
                    break;
                case SqlDataType.Variant:
                    returnType = string.Format("{0}{1}", "object", "");
                    break;
                case SqlDataType.DateTimeOffset:
                    returnType = string.Format("{0}{1}", "DateTimeOffset", isNullable ? "?" : "");
                    break;
            }

            return returnType;
        }
        private static string GetRouteName(string str)
        {
         if (str.EndsWith("y"))
            {
                str = str.Substring(0, str.Length - 1) + "ies";
            }
            else
            {
                str += "s";
            }
            string[] split = Regex.Split(str, @"(?<!^)(?=[A-Z])");
           var rs = string.Join("-", split);
            return rs.ToLower();
        }
private string ChangeName(string str)
{
if (str.EndsWith("y"))
            {
                str = str.Substring(0, str.Length - 1) + "ies";
            }
            else
            {
                str += "s";
            }
            return str;
}
private string ToLowerFirstLetter(string str)
{
return str.Substring(0, 1).ToLower() + str.Substring(1);
}
#>